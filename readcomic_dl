#!/bin/bash
	
	autosave="$HOME/readcomic_dl/autosave"
	workdir="$HOME/Downloads/"
	dialogrc="$HOME/readcomic_dl/.dialogrc"
	outputdir="$HOME/"
	url_regex='https://readcomiconline.li/Comic/(.*?)'
	load_time=6
	save_time=4
	
	[ -f ~/.dialogrc ] || cp "$dialogrc" ~/.dialogrc

	while true; do
	
		url=$(dialog  --title "Comic URL" \
				--inputbox "Enter the URL of your comic's main page:" 8 50 \
				3>&1 1>&2 2>&3 3>&- | tr -d ' ' \
		)
		
		[[ $url =~ $url_regex && $url != *"?id"* ]] && break || dialog --title "Error Input" \
		--msgbox "This script exclusively supports main page links from readcomiconline.li \nPlease try again!" 8 28
	done
	
	read -ra array <<< $(wget "$url" -q -O - | grep -Eo '"(.*?)\?id=[0-9]*"' | sed '1!G;h;$!d' | tr -d '"'| tr '\n' ' ')

	for x in "${!array[@]}"; do 

		clean_title[x]=$(echo "${array[x]}" | sed -e "s/\?id=[0-9]*//g" -e 's@.*/@@')
		item_help=$(echo "${array[x]}" | cut -d "/" -f3- | sed -e "s/\?id=[0-9]*//g")

		[ "$x" -eq "0" ] && { darray[0]="$x"; \
		darray[1]=" ${clean_title[x]} ";darray[2]="OFF";darray[3]="$item_help"; } || \
		{ darray[x*4]="$x"; \
		darray[x*4+1]=" ${clean_title[x]} "; darray[x*4+2]="OFF";darray[x*4+3]="$item_help"; }

	done
	
	full_comic="$(echo "${array[0]}" | cut -d "/" -f3)-"
	duplicates=($(echo "${clean_title[@]}" | fmt -1 | sort | uniq -Du))	
	
	[ -n "$duplicates" ] && { for x in "${!clean_title[@]}"; do
		echo "${duplicates[twin]}" | \
		grep -Ewqo "${clean_title[x]}" && \
		clean_title[x]="${clean_title[x]}#duplicate-$((twin+1))" && \
		((twin++)) && [ -z "${duplicates[twin]}" ] && break; \
		done; }

	[ "${#array[@]}" -gt "1" ] && dialog --colors \
		--backtitle "\Zbreadcomic_dl\Zn \Z1by tablet_seeker\Zn" \
		--title "\ZbMode Selection\Zn" "$@" \
		--yesno "Would you like to download a range of comics?" 6 30 \
		3>&1 1>&2 2>&3 3>&- || false
		
	[ "$?" -eq "1" ] && mode="multi" || mode="range"


	case "$mode" in

	  range)
	    
		while true; do
		
			issue=$(dialog  --clear \
					--colors \
					--help-button \
					--backtitle "\Zbreadcomic_dl\Zn \Z1by tablet_seeker\Zn" \
					--title "\ZbCustom Title Selection\Zn" "$@" \
					--output-fd 1 \
					--inputbox "$(echo -e "Enter a file naming scheme for your range.\n\
					You can use any combination of letters and symbols which \
					\Zb\Z1must\Zn be followed by a combination of \Zb\Zr - \Zn \
					and a number consisting of up to four digits \Zb\Zr 9999 \Zn. \
					Spaces are ignored, but special symbols and capital letters can be used.\n\n\
					Examples: \Zb\Zr MyComic-34 \Zn \Zb\Zr My_Cool_Comic-122 \Zn\n
					Press \Zb\Zr TAB \Zn and \Zb\Zr Cancel \Zn to skip" | sed -e "s/\\t//g")" 17 52 \
					3>&1 2>&3 3>&-)
					
			case "$?" in
			
				2)
					dialog --title "\ZbDetails\Zn" --colors \
					--clear \
					--backtitle "\Zbreadcomic_dl\Zn \Z1by tablet_seeker\Zn" \
	      				--msgbox "This option aims to grant users an opportunity to \
	      				choose a custom comic title. The 1-4 digit number that must be included \
	      				marks the issue number of the first issue in your range and will be raised \
	      				by increments of +1 until the end of the range. \
	      				For example, \"My_Comic-12\" implies the user's wish to download a range starting with issue 12, but prefers \
	      				a custom title instead of the default which would most likely be \"Issue-XX\"." 15 45
					;;
				1)
					input[0]="default" && break
					;;
				
				0)
					[[ $issue =~ ^(.*?)-[0-9]{,4}$ ]] && \
					{ read -ra input <<< $(echo "$issue" | tr -d ' ' | sed 's/\(.*\)-/\1 /'); } \
					&& break || dialog --colors \
					--title "\ZbError Input\Zn" \
					--msgbox "Your naming scheme does not match the prescribed method. Try again!" 7 28
					;;				
				esac
			
		done
		
		checklist_string="Please set a checkmark at the beginning and end of your\n\
		desired range by toggling the boxes next to the comic handle denoting each.\n
		Naming Scheme: \Zb\Z1${input[0]}\Zn \Zb\Z1${input[1]}\Zn \n  
		Press \Zb\Zr SPACE \Zn to toggle an option on/off.\n\n\
		Press \Zb\Zr Page UP \Zn or \Zb\Zr Page DOWN \Zn for rapid scrolling.\n\n\
		Press \Zb\Zr Arrow UP ↑ \Zn or \Zb\Zr Arrow DOWN ↓ \Zn for slow scrolling.\n\n"

		error_string="You must select exactly two options to complete a valid range!"
		error_check='2'
		num='echo y'
		start='echo ${index[0]}'
		limit='echo ${index[1]}'
		[ "${#input[@]}" -gt "1" ] && { scheme='echo ${input[0]}-';full_comic=""; } || \
		scheme='echo ${clean_title[y]}'
	    ;;

	  multi)

		checklist_string="Please set a checkmark at whichever comic you would like\n\
		to download. You can pick as many options as you like.\n
		Press \Zb\Zr SPACE \Zn to toggle an option on/off. \n\\n\
		Press \Zb\Zr Page UP \Zn or \Zb\Zr Page DOWN \Zn for rapid scrolling.\n\n\
		Press \Zb\Zr Arrow UP ↑ \Zn or \Zb\Zr Arrow DOWN ↓ \Zn for slow scrolling.\n\n"

		error_string="You have not selected any valid option. Please try again!"
		error_check='^[1-9]+$'
		start='echo 0'
		limit='echo 0'
		num='echo ${index[check-1]}'
		scheme='echo "${choice[check-1]}"'
	    ;;
	esac


	while true; do

			index=($(dialog --clear \
				--help-button \
				--item-help \
				--colors \
				--separate-output \
				--no-tags \
				--separator " " \
				--backtitle "\Zbreadcomic_dl\Zn \Z1by tablet_seeker\Zn" \
				--title "\Zb$(echo "${array[0]}" | cut -d "/" -f3)\Zn" "$@" \
				--output-fd 1 \
				--checklist "$(echo -e "$checklist_string" | sed -e "s/\\t//g")" 30 66 5 "${darray[@]}" 3>&1 2>&3 3>&-))

			case "$?" in
			
				2)
					dialog --title "\ZbDetails\Zn" --colors \
					--clear \
					--backtitle "\Zbreadcomic_dl\Zn \Z1by tablet_seeker\Zn" \
	      				--msgbox "Depending on the mode, this option either allows for the selection \
	      				of a range by setting two check marks, a random assortment or a single comic.\
	      				The list is always sorted in descending order, meaning it starts with the first \
	      				issue. Special issues like TPB or Full are always displayed at the very top, above \
	      				regular issues." 13 45
					;;
				1)
					exit
					;;
				
				0)
					[[ $(echo "${index[@]}" | wc -w) =~ $error_check ]] && \
					break || dialog --colors \
					--title "\ZbError Input\Zn" \
					--msgbox "$error_string" 7 29
					;;				
				esac



	done
			
			for x in "${!index[@]}"; do

				choice[x]="${clean_title[${index[x]}]}"
			done
				
				for x in "${!array[@]}"; do

					
					if [[ "$mode" == "multi" ]] && [ "$x" -eq "${index[check]}" ] || [[ "$mode" == "range" ]]; then

							for ((y=$(eval $start);y<=$(eval $limit);y++)); do
								
								((check++))
								
								name=$(eval $scheme)
								
								"$autosave" -b firefox -d "$workdir""$name""${input[1]}" -c "$full_comic$name${input[1]}" \
								--load-wait-time "$load_time" --save-wait-time "$save_time" "https://readcomiconline.li${array[$(eval $num)]}&s=&quality=hq&s=&readType=1"

								sleep 1

								gm convert "$workdir""$name""${input[1]}"_files/*.jpg "$outputdir""$name""${input[1]}".pdf && \

								rm -rf "$workdir""$name""${input[1]}"_files "$workdir""$name""${input[1]}"
								
								[[ -n ${input[1]} ]] && ((input[1]++))

					
							done
							
							[[ "$mode" == "range" ]] && exit
							[[ "$mode" == "multi" ]] && [ "$check" -eq "${#index[@]}" ] && exit
							
					
					fi		

				
				done

		
